datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  isAuthorized  Boolean   @default(false)
  role          UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Customer {
  id              String   @id @default(cuid())
  customerNumber  Int      @unique
  name            String
  legalName       String?
  email           String?
  phone           String?
  billingAddress  String?
  shippingAddress String?
  vatNumber       String?
  iban            String?
  notes           String?
  discountDoor    Float?
  discountParts   Float?
  paymentMethodId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  contacts Contact[]

  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customers   Customer[]
}

model Contact {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  customerId   String
  departmentId String?
  positionId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id])
  position   Position?   @relation(fields: [positionId], references: [id])

  @@index([customerId])
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[]
}

model Position {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[]
}

model DoorType {
  id          String             @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      DoorTypeImage[]
  hardware    DoorTypeHardware[]
}

model DoorTypeImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      DoorType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model DoorFinish {
  id          String            @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  images      DoorFinishImage[]
}

model DoorFinishImage {
  id        String     @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  finish    DoorFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model DoorTypeHardware {
  doorTypeId String
  hardwareId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doorType   DoorType @relation(fields: [doorTypeId], references: [id], onDelete: Cascade)
  hardware   Hardware @relation(fields: [hardwareId], references: [id], onDelete: Cascade)

  @@id([doorTypeId, hardwareId])
  @@index([hardwareId])
}

model Hardware {
  id          String             @id @default(cuid())
  name        String
  description String?
  reference   String?
  price       Float
  finishId    String?
  typeId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  finish      HardwareFinish?    @relation(fields: [finishId], references: [id])
  type        HardwareType       @relation(fields: [typeId], references: [id])
  images      HardwareImage[]
  doorTypes   DoorTypeHardware[]
}

model HardwareImage {
  id         String   @id @default(cuid())
  url        String
  publicId   String
  hardwareId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hardware   Hardware @relation(fields: [hardwareId], references: [id], onDelete: Cascade)
}

model HardwareType {
  id          String              @id @default(cuid())
  name        String
  description String?
  slug        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  images      HardwareTypeImage[]
  hardware    Hardware[]
}

model HardwareTypeImage {
  id        String       @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  type      HardwareType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model HardwareFinish {
  id          String                @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  images      HardwareFinishImage[]
  hardware    Hardware[]
}

model HardwareFinishImage {
  id        String         @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  finish    HardwareFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model Frame {
  id          String       @id @default(cuid())
  name        String
  description String?
  reference   String?
  familyId    String
  typeId      String
  finishId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  images      FrameImage[]
  family      FrameFamily  @relation(fields: [familyId], references: [id])
  type        FrameType    @relation(fields: [typeId], references: [id])
  finish      FrameFinish  @relation(fields: [finishId], references: [id])
  prices      FramePrice[]
}

model FrameImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  frameId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
}

model FrameFamily {
  id          String             @id @default(cuid())
  name        String
  description String?
  slug        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      FrameFamilyImage[]
  Frame       Frame[]
}

model FrameFamilyImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  familyId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  family    FrameFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model FrameType {
  id          String           @id @default(cuid())
  name        String
  description String?
  slug        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      FrameTypeImage[]
  Frame       Frame[]
}

model FrameTypeImage {
  id        String    @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      FrameType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model FrameFinish {
  id          String             @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      FrameFinishImage[]
  Frame       Frame[]
}

model FrameFinishImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  finish    FrameFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model FramePrice {
  id        String   @id @default(cuid())
  frameId   String
  width     Float
  height    Float
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@unique([frameId, width, height])
}
