datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?
  isAuthorized  Boolean   @default(false)
  role          UserRole  @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Customer {
  id              String   @id @default(cuid())
  customerNumber  Int      @unique
  name            String
  legalName       String?
  email           String?
  phone           String?
  billingAddress  String?
  shippingAddress String?
  vatNumber       String?
  iban            String?
  notes           String?
  discountDoor    Float?
  discountParts   Float?
  paymentMethodId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  contacts Contact[]

  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  Budget        Budget[]
}

model PaymentMethod {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customers   Customer[]
  Budget      Budget[]
}

model Contact {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  customerId   String
  departmentId String?
  positionId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id])
  position   Position?   @relation(fields: [positionId], references: [id])

  @@index([customerId])
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[]
}

model Position {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contacts    Contact[]
}

model DoorType {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  families DoorTypeFamily[]
  hardware DoorTypeHardware[]
  images   DoorTypeImage[]
  prices   DoorTypePrice[]
}

model DoorTypeImage {
  id         String   @id @default(cuid())
  url        String
  publicId   String
  doorTypeId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doorType   DoorType @relation(fields: [doorTypeId], references: [id], onDelete: Cascade)
}

model DoorTypePrice {
  id         String   @id @default(cuid())
  doorTypeId String
  width      Float
  height     Float
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doorType   DoorType @relation(fields: [doorTypeId], references: [id], onDelete: Cascade)

  @@unique([doorTypeId, width, height])
}

model DoorTypeFamily {
  doorTypeId   String
  doorFamilyId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  doorType   DoorType   @relation(fields: [doorTypeId], references: [id], onDelete: Cascade)
  doorFamily DoorFamily @relation(fields: [doorFamilyId], references: [id], onDelete: Cascade)

  @@id([doorTypeId, doorFamilyId])
  @@index([doorFamilyId])
}

model DoorTypeHardware {
  doorTypeId String
  hardwareId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  doorType DoorType @relation(fields: [doorTypeId], references: [id], onDelete: Cascade)
  hardware Hardware @relation(fields: [hardwareId], references: [id], onDelete: Cascade)

  @@id([doorTypeId, hardwareId])
  @@index([hardwareId])
}

model DoorFamily {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  types  DoorTypeFamily[]
  models DoorFamilyModel[]
  images DoorFamilyImage[]
  prices DoorFamilyPrice[]
}

model DoorFamilyImage {
  id           String     @id @default(cuid())
  url          String
  publicId     String
  doorFamilyId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  doorFamily   DoorFamily @relation(fields: [doorFamilyId], references: [id], onDelete: Cascade)
}

model DoorFamilyPrice {
  id           String     @id @default(cuid())
  doorFamilyId String
  width        Float
  height       Float
  price        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  doorFamily   DoorFamily @relation(fields: [doorFamilyId], references: [id], onDelete: Cascade)

  @@unique([doorFamilyId, width, height])
}

model DoorFamilyModel {
  doorFamilyId String
  doorModelId  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  doorFamily DoorFamily @relation(fields: [doorFamilyId], references: [id], onDelete: Cascade)
  doorModel  DoorModel  @relation(fields: [doorModelId], references: [id], onDelete: Cascade)

  @@id([doorFamilyId, doorModelId])
  @@index([doorModelId])
}

model DoorModel {
  id          String   @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  families DoorFamilyModel[]
  finishes DoorModelFinish[]
  images   DoorModelImage[]
  prices   DoorModelPrice[]
}

model DoorModelImage {
  id          String    @id @default(cuid())
  url         String
  publicId    String
  doorModelId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  doorModel   DoorModel @relation(fields: [doorModelId], references: [id], onDelete: Cascade)
}

model DoorModelPrice {
  id          String    @id @default(cuid())
  doorModelId String
  width       Float
  height      Float
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  doorModel   DoorModel @relation(fields: [doorModelId], references: [id], onDelete: Cascade)

  @@unique([doorModelId, width, height])
}

model DoorModelFinish {
  doorModelId  String
  doorFinishId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  doorModel  DoorModel  @relation(fields: [doorModelId], references: [id], onDelete: Cascade)
  doorFinish DoorFinish @relation(fields: [doorFinishId], references: [id], onDelete: Cascade)

  @@id([doorModelId, doorFinishId])
  @@index([doorFinishId])
}

model DoorFinish {
  id          String            @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  models      DoorModelFinish[]
  images      DoorFinishImage[]
  prices      DoorFinishPrice[]
}

model DoorFinishImage {
  id           String     @id @default(cuid())
  url          String
  publicId     String
  doorFinishId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  doorFinish   DoorFinish @relation(fields: [doorFinishId], references: [id], onDelete: Cascade)
}

model DoorFinishPrice {
  id           String     @id @default(cuid())
  doorFinishId String
  width        Float
  height       Float
  price        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  doorFinish   DoorFinish @relation(fields: [doorFinishId], references: [id], onDelete: Cascade)

  @@unique([doorFinishId, width, height])
}

model DoorExtra {
  id          String           @id @default(cuid())
  name        String
  description String?
  reference   String?
  price       Float
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      DoorExtraImage[]
}

model DoorExtraImage {
  id          String    @id @default(cuid())
  url         String
  publicId    String
  doorExtraId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  doorExtra   DoorExtra @relation(fields: [doorExtraId], references: [id], onDelete: Cascade)
}

model Hardware {
  id          String   @id @default(cuid())
  name        String
  description String?
  reference   String?
  price       Float
  finishId    String?
  typeId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images    HardwareImage[]
  doorTypes DoorTypeHardware[]

  finish HardwareFinish? @relation(fields: [finishId], references: [id])
  type   HardwareType    @relation(fields: [typeId], references: [id])
}

model HardwareImage {
  id         String   @id @default(cuid())
  url        String
  publicId   String
  hardwareId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  hardware   Hardware @relation(fields: [hardwareId], references: [id], onDelete: Cascade)
}

model HardwareType {
  id          String              @id @default(cuid())
  name        String
  description String?
  slug        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  images      HardwareTypeImage[]
  hardware    Hardware[]
}

model HardwareTypeImage {
  id        String       @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  type      HardwareType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model HardwareFinish {
  id          String                @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  images      HardwareFinishImage[]
  hardware    Hardware[]
}

model HardwareFinishImage {
  id        String         @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  finish    HardwareFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model Frame {
  id           String       @id @default(cuid())
  name         String
  description  String?
  reference    String?
  sitec        Boolean      @default(false)
  heightOffset Float        @default(0)
  familyId     String
  typeId       String
  finishId     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  images       FrameImage[]
  family       FrameFamily  @relation(fields: [familyId], references: [id])
  type         FrameType    @relation(fields: [typeId], references: [id])
  finish       FrameFinish  @relation(fields: [finishId], references: [id])
  prices       FramePrice[]
}

model FrameImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  frameId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
}

model FrameFamily {
  id          String             @id @default(cuid())
  name        String
  description String?
  slug        String             @unique
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      FrameFamilyImage[]
  Frame       Frame[]
}

model FrameFamilyImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  familyId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  family    FrameFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model FrameType {
  id          String           @id @default(cuid())
  name        String
  description String?
  slug        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      FrameTypeImage[]
  Frame       Frame[]
}

model FrameTypeImage {
  id        String    @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      FrameType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model FrameFinish {
  id          String             @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      FrameFinishImage[]
  Frame       Frame[]
}

model FrameFinishImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  finish    FrameFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model FramePrice {
  id        String   @id @default(cuid())
  frameId   String
  width     Float
  height    Float
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  frame     Frame    @relation(fields: [frameId], references: [id], onDelete: Cascade)

  @@unique([frameId, width, height])
}

model Architrave {
  id           String            @id @default(cuid())
  name         String
  description  String?
  reference    String?
  heightOffset Float             @default(0)
  familyId     String
  typeId       String
  finishId     String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  images       ArchitraveImage[]
  family       ArchitraveFamily  @relation(fields: [familyId], references: [id])
  type         ArchitraveType    @relation(fields: [typeId], references: [id])
  finish       ArchitraveFinish  @relation(fields: [finishId], references: [id])
  prices       ArchitravePrice[]
}

model ArchitraveImage {
  id           String     @id @default(cuid())
  url          String
  publicId     String
  architraveId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  architrave   Architrave @relation(fields: [architraveId], references: [id], onDelete: Cascade)
}

model ArchitraveFamily {
  id          String                  @id @default(cuid())
  name        String
  description String?
  slug        String                  @unique
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  images      ArchitraveFamilyImage[]
  Architrave  Architrave[]
}

model ArchitraveFamilyImage {
  id        String           @id @default(cuid())
  url       String
  publicId  String
  familyId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  family    ArchitraveFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model ArchitraveType {
  id          String                @id @default(cuid())
  name        String
  description String?
  slug        String                @unique
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  images      ArchitraveTypeImage[]
  Architrave  Architrave[]
}

model ArchitraveTypeImage {
  id        String         @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      ArchitraveType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model ArchitraveFinish {
  id          String                  @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  images      ArchitraveFinishImage[]
  Architrave  Architrave[]
}

model ArchitraveFinishImage {
  id        String           @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  finish    ArchitraveFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model ArchitravePrice {
  id           String     @id @default(cuid())
  architraveId String
  width        Float
  height       Float
  price        Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  architrave   Architrave @relation(fields: [architraveId], references: [id], onDelete: Cascade)

  @@unique([architraveId, width, height])
}

model Glass {
  id          String   @id @default(cuid())
  name        String
  description String?
  reference   String?
  familyId    String
  typeId      String
  finishId    String
  modelId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images GlassImage[]
  prices GlassPrice[]

  family GlassFamily @relation(fields: [familyId], references: [id])
  type   GlassType   @relation(fields: [typeId], references: [id])
  finish GlassFinish @relation(fields: [finishId], references: [id])
  model  GlassModel  @relation(fields: [modelId], references: [id])
}

model GlassImage {
  id        String   @id @default(cuid())
  url       String
  publicId  String
  glassId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  glass     Glass    @relation(fields: [glassId], references: [id], onDelete: Cascade)
}

model GlassFamily {
  id          String             @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      GlassFamilyImage[]
  glass       Glass[]
}

model GlassFamilyImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  familyId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  family    GlassFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model GlassType {
  id          String           @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  images      GlassTypeImage[]
  glass       Glass[]
}

model GlassTypeImage {
  id        String    @id @default(cuid())
  url       String
  publicId  String
  typeId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      GlassType @relation(fields: [typeId], references: [id], onDelete: Cascade)
}

model GlassFinish {
  id          String             @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  images      GlassFinishImage[]
  glass       Glass[]
}

model GlassFinishImage {
  id        String      @id @default(cuid())
  url       String
  publicId  String
  finishId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  finish    GlassFinish @relation(fields: [finishId], references: [id], onDelete: Cascade)
}

model GlassModel {
  id          String            @id @default(cuid())
  name        String
  description String?
  reference   String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  images      GlassModelImage[]
  glass       Glass[]
}

model GlassModelImage {
  id        String     @id @default(cuid())
  url       String
  publicId  String
  modelId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  model     GlassModel @relation(fields: [modelId], references: [id], onDelete: Cascade)
}

model GlassPrice {
  id        String   @id @default(cuid())
  glassId   String
  width     Float
  height    Float
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  glass     Glass    @relation(fields: [glassId], references: [id], onDelete: Cascade)

  @@unique([glassId, width, height])
}

enum BudgetStatus {
  pending
  accepted
  rejected
  expired
  closed
}

model Budget {
  id              String       @id @default(cuid())
  customerId      String
  date            String
  discount        Int
  number          Int
  observations    String?
  paymentMethodId String
  reference       String?
  sendAddress     String?
  showIBAN        Boolean
  status          BudgetStatus @default(pending)
  tax             Int
  validity        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer      Customer      @relation(fields: [customerId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}
